// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SdvCode.Data;

namespace SdvCode.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220520163021_SetupUserActionsInSeparateDataModels")]
    partial class SetupUserActionsInSeparateDataModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SdvCode.Areas.Administration.Models.HolidayTheme.HolidayIcon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HolidayThemeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HolidayThemeId");

                    b.ToTable("HolidayIcons");
                });

            modelBuilder.Entity("SdvCode.Areas.Administration.Models.HolidayTheme.HolidayTheme", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("HolidayThemes");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.ChatImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatMessageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ChatMessageId");

                    b.HasIndex("GroupId");

                    b.ToTable("ChatImages");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.ChatMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiverUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecieverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("GroupId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.ChatTheme", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChatThemes");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.Emoji", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EmojiType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Emojis");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.EmojiSkin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmojiId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmojiId");

                    b.ToTable("EmojiSkins");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.FavouriteStickers", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StickerTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.HasKey("ApplicationUserId", "StickerTypeId");

                    b.HasIndex("StickerTypeId");

                    b.ToTable("FavouriteStickers");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatThemeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ChatThemeId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.QuickChatReply", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("QuickChatReplies");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.Sticker", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("StickerTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StickerTypeId");

                    b.ToTable("Stickers");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.StickerType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StickerTypes");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.UserGroup", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UsersGroups");
                });

            modelBuilder.Entity("SdvCode.Areas.SdvShop.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AditionalInfromation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CanceledOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("FinishedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SdvCode.Areas.SdvShop.Models.OrderProduct", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WantedQuantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("SdvCode.Areas.SdvShop.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("ProductCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SpecificationsDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SdvCode.Areas.SdvShop.Models.ProductCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("SdvCode.Areas.SdvShop.Models.ProductComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentCommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductComments");
                });

            modelBuilder.Entity("SdvCode.Areas.SdvShop.Models.ProductImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("SdvCode.Areas.SdvShop.Models.ProductReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("SdvCode.Areas.UserNotifications.Models.UserNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TargetUsername")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.BlockedPost", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.HasKey("ApplicationUserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("BlockedPosts");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CommentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParentCommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.FavouritePost", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.HasKey("ApplicationUserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("FavouritePosts");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.PendingPost", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.HasKey("ApplicationUserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("PendingPosts");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("PostStatus")
                        .HasColumnType("int");

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.PostImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostImages");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.PostLike", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PostsLikes");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.PostTag", b =>
                {
                    b.Property<string>("TagId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TagId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("PostsTags");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("SdvCode.Models.User.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RoleLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("ApplicationRoles");
                });

            modelBuilder.Entity("SdvCode.Models.User.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AboutMe")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCodeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GitHubUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LinkedinUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonToBeBlocked")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackoverflowUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZipCodeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryCodeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StateId");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("SdvCode.Models.User.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUsersRoles");
                });

            modelBuilder.Entity("SdvCode.Models.User.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("SdvCode.Models.User.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryCodeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CountryCodeId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("SdvCode.Models.User.CountryCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("CountryCodes");
                });

            modelBuilder.Entity("SdvCode.Models.User.FollowUnfollow", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FollowerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsFollowed")
                        .HasColumnType("bit");

                    b.HasKey("ApplicationUserId", "FollowerId");

                    b.HasIndex("FollowerId");

                    b.ToTable("FollowUnfollows");
                });

            modelBuilder.Entity("SdvCode.Models.User.RecommendedFriend", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecommendedApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationUserId", "RecommendedApplicationUserId");

                    b.HasIndex("RecommendedApplicationUserId");

                    b.ToTable("RecommendedFriends");
                });

            modelBuilder.Entity("SdvCode.Models.User.State", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserAction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseUserActionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BaseUserActionId")
                        .IsUnique();

                    b.HasIndex("PostId");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BaseUserAction", b =>
                {
                    b.Property<string>("UserActionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActionStatus")
                        .HasColumnType("int");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SystemMessage")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("UserActionId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("BaseUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserRating", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RaterUsername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Stars")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.HasKey("Username", "RaterUsername");

                    b.ToTable("UserRatings");
                });

            modelBuilder.Entity("SdvCode.Models.User.ZipCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("ZipCodes");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.CreatePostUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PostId");

                    b.ToTable("CreatePostUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.DeleteOwnPostUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.ToTable("DeleteOwnPostUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.DeletePostUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.ToTable("DeletePostUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.DeletedPostUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("DeleterApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasIndex("DeleterApplicationUserId");

                    b.ToTable("DeletedPostUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.EditOwnPostUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PostId");

                    b.ToTable("EditOwnPostUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.EditPostUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PostId");

                    b.ToTable("EditPostUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.EditedPostUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("EditorApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("EditorApplicationUserId");

                    b.HasIndex("PostId");

                    b.ToTable("EditedPostUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.LikeOwnPostUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PostId");

                    b.ToTable("LikeOwnPostUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.LikePostUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PostId");

                    b.ToTable("LikePostUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.LikedPostUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("LikerApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("LikerApplicationUserId");

                    b.HasIndex("PostId");

                    b.ToTable("LikedPostUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.UnlikeOwnPostUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PostId");

                    b.ToTable("UnlikeOwnPostUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.UnlikePostUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PostId");

                    b.ToTable("UnlikePostUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.UnlikedPostUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnlikerApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PostId");

                    b.HasIndex("UnlikerApplicationUserId");

                    b.ToTable("UnlikedPostUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.FollowUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("FollowingApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("FollowingApplicationUserId");

                    b.ToTable("FollowUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.FollowedUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("FollowerApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("FollowerApplicationUserId");

                    b.ToTable("FollowedUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.ProfileActions.ChangeCoverImageUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.ToTable("ChangeCoverImageUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.ProfileActions.ChangeProfilePictureUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.ToTable("ChangeProfilePictureUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.ProfileActions.EditPersonalDataUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("EditPersonalDataUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.UnfollowUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("UnfollowingApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("UnfollowingApplicationUserId");

                    b.ToTable("UnfollowUserActions");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.UnfollowedUserAction", b =>
                {
                    b.HasBaseType("SdvCode.Models.User.UserActions.BaseUserAction");

                    b.Property<string>("UnfollowerApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("UnfollowerApplicationUserId");

                    b.ToTable("UnfollowedUserActions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SdvCode.Areas.Administration.Models.HolidayTheme.HolidayIcon", b =>
                {
                    b.HasOne("SdvCode.Areas.Administration.Models.HolidayTheme.HolidayTheme", "HolidayTheme")
                        .WithMany("HolidayIcons")
                        .HasForeignKey("HolidayThemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HolidayTheme");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.ChatImage", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", null)
                        .WithMany("ChatImages")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("SdvCode.Areas.PrivateChat.Models.ChatMessage", "ChatMessage")
                        .WithMany("ChatImages")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SdvCode.Areas.PrivateChat.Models.Group", "Group")
                        .WithMany("ChatImages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChatMessage");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.ChatMessage", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Areas.PrivateChat.Models.Group", "Group")
                        .WithMany("ChatMessages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.EmojiSkin", b =>
                {
                    b.HasOne("SdvCode.Areas.PrivateChat.Models.Emoji", "Emoji")
                        .WithMany("EmojiSkins")
                        .HasForeignKey("EmojiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Emoji");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.FavouriteStickers", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("FavouriteStickers")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Areas.PrivateChat.Models.StickerType", "StickerType")
                        .WithMany()
                        .HasForeignKey("StickerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("StickerType");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.Group", b =>
                {
                    b.HasOne("SdvCode.Areas.PrivateChat.Models.ChatTheme", "ChatTheme")
                        .WithMany("Groups")
                        .HasForeignKey("ChatThemeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChatTheme");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.QuickChatReply", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("QuickChatReplies")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.Sticker", b =>
                {
                    b.HasOne("SdvCode.Areas.PrivateChat.Models.StickerType", "StickerType")
                        .WithMany("Stickers")
                        .HasForeignKey("StickerTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StickerType");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.UserGroup", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("UsersGroups")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Areas.PrivateChat.Models.Group", "Group")
                        .WithMany("UsersGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SdvCode.Areas.SdvShop.Models.OrderProduct", b =>
                {
                    b.HasOne("SdvCode.Areas.SdvShop.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Areas.SdvShop.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SdvCode.Areas.SdvShop.Models.Product", b =>
                {
                    b.HasOne("SdvCode.Areas.SdvShop.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("SdvCode.Areas.SdvShop.Models.ProductComment", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("ProductComments")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("SdvCode.Areas.SdvShop.Models.ProductComment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("SdvCode.Areas.SdvShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("ParentComment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SdvCode.Areas.SdvShop.Models.ProductImage", b =>
                {
                    b.HasOne("SdvCode.Areas.SdvShop.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SdvCode.Areas.SdvShop.Models.ProductReview", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("SdvCode.Areas.SdvShop.Models.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SdvCode.Areas.UserNotifications.Models.UserNotification", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("UserNotifications")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.BlockedPost", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("BlockedPosts")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany("BlockedPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.Comment", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("Comments")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.Blog.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("ParentComment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.FavouritePost", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("FavouritePosts")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany("FavouritePosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.PendingPost", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("PendingPosts")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany("PendingPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.Post", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("Posts")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.Blog.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.PostImage", b =>
                {
                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.PostLike", b =>
                {
                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.PostTag", b =>
                {
                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany("PostsTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.Blog.Tag", "Tag")
                        .WithMany("TagsPosts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("SdvCode.Models.User.ApplicationUser", b =>
                {
                    b.HasOne("SdvCode.Models.User.City", "City")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("CityId");

                    b.HasOne("SdvCode.Models.User.CountryCode", "CountryCode")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("CountryCodeId");

                    b.HasOne("SdvCode.Models.User.Country", "Country")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("CountryId");

                    b.HasOne("SdvCode.Models.User.State", "State")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("StateId");

                    b.HasOne("SdvCode.Models.User.ZipCode", "ZipCode")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ZipCodeId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("CountryCode");

                    b.Navigation("State");

                    b.Navigation("ZipCode");
                });

            modelBuilder.Entity("SdvCode.Models.User.ApplicationUserRole", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SdvCode.Models.User.City", b =>
                {
                    b.HasOne("SdvCode.Models.User.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SdvCode.Models.User.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("SdvCode.Models.User.Country", b =>
                {
                    b.HasOne("SdvCode.Models.User.CountryCode", "CountryCode")
                        .WithMany("Coutries")
                        .HasForeignKey("CountryCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CountryCode");
                });

            modelBuilder.Entity("SdvCode.Models.User.FollowUnfollow", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("Followers")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.ApplicationUser", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("SdvCode.Models.User.RecommendedFriend", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("RecommendedFriends")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.ApplicationUser", "RecommendedApplicationUser")
                        .WithMany("UserRecommendations")
                        .HasForeignKey("RecommendedApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("RecommendedApplicationUser");
                });

            modelBuilder.Entity("SdvCode.Models.User.State", b =>
                {
                    b.HasOne("SdvCode.Models.User.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserAction", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", null)
                        .WithMany("UserActions")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", "BaseUserAction")
                        .WithOne("UserAction")
                        .HasForeignKey("SdvCode.Models.User.UserAction", "BaseUserActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.Blog.Post", null)
                        .WithMany("UserActions")
                        .HasForeignKey("PostId");

                    b.Navigation("BaseUserAction");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BaseUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SdvCode.Models.User.ZipCode", b =>
                {
                    b.HasOne("SdvCode.Models.User.City", "City")
                        .WithMany("ZipCodes")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.CreatePostUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.BlogActions.CreatePostUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.DeleteOwnPostUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.BlogActions.DeleteOwnPostUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.DeletePostUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.BlogActions.DeletePostUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.DeletedPostUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "DeleterApplicationUser")
                        .WithMany()
                        .HasForeignKey("DeleterApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.BlogActions.DeletedPostUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("DeleterApplicationUser");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.EditOwnPostUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.BlogActions.EditOwnPostUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.EditPostUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.BlogActions.EditPostUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.EditedPostUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "EditorApplicationUser")
                        .WithMany()
                        .HasForeignKey("EditorApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.BlogActions.EditedPostUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("EditorApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.LikeOwnPostUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.BlogActions.LikeOwnPostUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.LikePostUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.BlogActions.LikePostUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.LikedPostUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "LikerApplicationUser")
                        .WithMany()
                        .HasForeignKey("LikerApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.BlogActions.LikedPostUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("LikerApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.UnlikeOwnPostUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.BlogActions.UnlikeOwnPostUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.UnlikePostUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.BlogActions.UnlikePostUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BlogActions.UnlikedPostUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.Blog.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.ApplicationUser", "UnlikerApplicationUser")
                        .WithMany()
                        .HasForeignKey("UnlikerApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.BlogActions.UnlikedPostUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("UnlikerApplicationUser");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.FollowUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "FollowingApplicationUser")
                        .WithMany()
                        .HasForeignKey("FollowingApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.FollowUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FollowingApplicationUser");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.FollowedUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "FollowerApplicationUser")
                        .WithMany()
                        .HasForeignKey("FollowerApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.FollowedUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FollowerApplicationUser");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.ProfileActions.ChangeCoverImageUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.ProfileActions.ChangeCoverImageUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.ProfileActions.ChangeProfilePictureUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.ProfileActions.ChangeProfilePictureUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.ProfileActions.EditPersonalDataUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.ProfileActions.EditPersonalDataUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.UnfollowUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "UnfollowingApplicationUser")
                        .WithMany()
                        .HasForeignKey("UnfollowingApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.UnfollowUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("UnfollowingApplicationUser");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.UnfollowedUserAction", b =>
                {
                    b.HasOne("SdvCode.Models.User.ApplicationUser", "UnfollowerApplicationUser")
                        .WithMany()
                        .HasForeignKey("UnfollowerApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdvCode.Models.User.UserActions.BaseUserAction", null)
                        .WithOne()
                        .HasForeignKey("SdvCode.Models.User.UserActions.UnfollowedUserAction", "UserActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("UnfollowerApplicationUser");
                });

            modelBuilder.Entity("SdvCode.Areas.Administration.Models.HolidayTheme.HolidayTheme", b =>
                {
                    b.Navigation("HolidayIcons");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.ChatMessage", b =>
                {
                    b.Navigation("ChatImages");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.ChatTheme", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.Emoji", b =>
                {
                    b.Navigation("EmojiSkins");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.Group", b =>
                {
                    b.Navigation("ChatImages");

                    b.Navigation("ChatMessages");

                    b.Navigation("UsersGroups");
                });

            modelBuilder.Entity("SdvCode.Areas.PrivateChat.Models.StickerType", b =>
                {
                    b.Navigation("Stickers");
                });

            modelBuilder.Entity("SdvCode.Areas.SdvShop.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("SdvCode.Areas.SdvShop.Models.Product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("SdvCode.Areas.SdvShop.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.Post", b =>
                {
                    b.Navigation("BlockedPosts");

                    b.Navigation("Comments");

                    b.Navigation("FavouritePosts");

                    b.Navigation("PendingPosts");

                    b.Navigation("PostImages");

                    b.Navigation("PostLikes");

                    b.Navigation("PostsTags");

                    b.Navigation("UserActions");
                });

            modelBuilder.Entity("SdvCode.Models.Blog.Tag", b =>
                {
                    b.Navigation("TagsPosts");
                });

            modelBuilder.Entity("SdvCode.Models.User.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SdvCode.Models.User.ApplicationUser", b =>
                {
                    b.Navigation("BlockedPosts");

                    b.Navigation("ChatImages");

                    b.Navigation("ChatMessages");

                    b.Navigation("Comments");

                    b.Navigation("FavouritePosts");

                    b.Navigation("FavouriteStickers");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("PendingPosts");

                    b.Navigation("PostLikes");

                    b.Navigation("Posts");

                    b.Navigation("ProductComments");

                    b.Navigation("ProductReviews");

                    b.Navigation("QuickChatReplies");

                    b.Navigation("RecommendedFriends");

                    b.Navigation("UserActions");

                    b.Navigation("UserNotifications");

                    b.Navigation("UserRecommendations");

                    b.Navigation("UserRoles");

                    b.Navigation("UsersGroups");
                });

            modelBuilder.Entity("SdvCode.Models.User.City", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("ZipCodes");
                });

            modelBuilder.Entity("SdvCode.Models.User.Country", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("Cities");

                    b.Navigation("States");
                });

            modelBuilder.Entity("SdvCode.Models.User.CountryCode", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("Coutries");
                });

            modelBuilder.Entity("SdvCode.Models.User.State", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SdvCode.Models.User.UserActions.BaseUserAction", b =>
                {
                    b.Navigation("UserAction");
                });

            modelBuilder.Entity("SdvCode.Models.User.ZipCode", b =>
                {
                    b.Navigation("ApplicationUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
